openapi: "3.1.3"
info:
  title: Coach App API
  version: "1.0.0"
  description: REST API para autenticación, jugadores y asistencias.

servers:
  - url: http://localhost:8000/api/v1
    description: Dev

tags:
  - name: Auth
  - name: Players
  - name: Attendance

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Registrar usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
            examples:
              ok:
                value:
                  email: "coach@demo.com"
                  password: "secret1234"
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterOutput'
        '409':
          $ref: '#/components/responses/EmailInUse'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginOutput'
        '401':
          $ref: '#/components/responses/InvalidCredentials'

  /players:
    get:
      tags: [Players]
      summary: Listar jugadores
      parameters:
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Lista
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Player'
                  meta:
                    $ref: '#/components/schemas/PagingMeta'
    post:
      tags: [Players]
      summary: Crear jugador
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerCreate'
      responses:
        '200':
          description: Detalle del jugador creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenRole'

  /attendance:
    post:
      tags: [Attendance]
      summary: Marcar asistencia
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceMark'
      responses:
        '201':
          description: Creado
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenRole'

  /attendance/summary/{playerId}:
    get:
      tags: [Attendance]
      summary: Resumen mensual de asistencia
      parameters:
        - in: path
          name: playerId
          required: true
          schema:
            type: integer
        - in: query
          name: year
          schema:
            type: integer
        - in: query
          name: month
          schema:
            type: integer
            minimum: 1
            maximum: 12
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceSummary'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: No autorizado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenRole:
      description: Rol no permitido
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    EmailInUse:
      description: Email en uso
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidCredentials:
      description: Credenciales inválidas
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string

    PagingMeta:
      type: object
      properties:
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    RegisterInput:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    RegisterOutput:
      type: object
      properties:
        data:
          type: object
          properties:
            user_id:
              type: integer
            email:
              type: string
              format: email
            role:
              type: string
              enum: [player, coach]

    LoginInput:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginOutput:
      type: object
      properties:
        token:
          type: string
        user:
          type: object
          properties:
            user_id:
              type: integer
            email:
              type: string
            role:
              type: string

    Player:
      type: object
      properties:
        person_id: { type: integer }
        first_name: { type: string }
        last_name: { type: string }
        birth_date:
          type: string
          format: date
        preferred_foot:
          type: string
          enum: [Left, Right, Both]
        jersey_number:
          type: integer
          nullable: true
        position_id:
          type: integer
          nullable: true
        category_name:
          type: string
          nullable: true
        academy_name:
          type: string
          nullable: true

    PlayerCreate:
      type: object
      required: [first_name, last_name, birth_date]
      properties:
        first_name: { type: string }
        last_name:  { type: string }
        birth_date:
          type: string
          format: date
        jersey_number:
          type: integer
          minimum: 1
          maximum: 99
          nullable: true
        preferred_foot:
          type: string
          enum: [Left, Right, Both]
          default: Right

    AttendanceMark:
      type: object
      required: [session_id, player_id, status]
      properties:
        session_id: { type: integer }
        player_id:  { type: integer }
        status:
          type: string
          enum: [present, absent, late, excused]
        checkin_at:
          type: string
          format: date-time
          nullable: true
        remarks:
          type: string
          nullable: true

    AttendanceSummary:
      type: object
      properties:
        player_id: { type: integer }
        year: { type: integer }
        month: { type: integer }
        presents: { type: integer }
        total: { type: integer }
        percent: { type: integer }
